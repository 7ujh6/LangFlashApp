{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyDaZiqbkNS-wFDih0zU3rv0bUYC_gU8LiY\",\n  authDomain: \"langflash-db.firebaseapp.com\",\n  databaseURL: \"https://langflash-db.firebaseio.com\",\n  projectId: \"langflash-db\",\n  storageBucket: \"langflash-db.appspot.com\",\n  messagingSenderId: \"750372521965\",\n  appId: \"1:750372521965:web:1394ec28b8a0f9e00bc9e4\",\n  measurementId: \"G-JY3RHBYG3X\"\n};\nfirebase.initializeApp(config);\nexport const createUserDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; //console.log(\"data coming in from SignUp\", \"userAuth: \", userAuth, \"additionalData: \", additionalData);\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      email\n    } = userAuth;\n    const joinDate = new Date();\n    const displayName = !userAuth.displayName ? userAuth.displayName : additionalData.displayName;\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        joinDate,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const SignInWithGoogle = () => auth.signInWithPopup(provider);\nexport const fetchReferenceObject = referenceString => {\n  return firestore.doc(referenceString);\n};\nexport const filterActiveFriends = async friendsList => {\n  return await friendsList.filter((friend, idx) => idx < 5 && firestore.doc(friend).get().activityStatus === \"online\");\n};\nexport const appendFriend = async (id, friendsList, friend) => {\n  //caches the referenceString within friendsList at this point\n  return await firestore.doc(`users/${id}`).set({\n    friendsList: [...friendsList, friend]\n  });\n};\nexport const deleteFriend = async (id, friendsList, friend) => {\n  return await firestore.doc(`users/${id}`).set({\n    friendsList: friendsList.filter(it => it === friend)\n  });\n};\nexport const blockFriend = async (friendsList, blockList, friend) => {};\nexport const unblockFriend = async (blockList, friendsList, friend) => {};\nexport const updateDisplayName = async (id, displayName) => {\n  await firestore.doc(`users/${id}`).set({\n    displayName: displayName\n  });\n  return displayName;\n};\nexport const updateDisplayIcon = async (id, displayIcon) => {\n  await firestore.doc(`users/${id}`).set({\n    displayIcon: displayIcon\n  });\n  return displayIcon;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport default firebase;","map":{"version":3,"sources":["C:/Users/stant/Documents/PortfolioProjects/VentilatorDonationApp/ventilator-donation/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","email","joinDate","Date","displayName","set","error","console","log","message","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","SignInWithGoogle","signInWithPopup","fetchReferenceObject","referenceString","filterActiveFriends","friendsList","filter","friend","idx","activityStatus","appendFriend","id","deleteFriend","it","blockFriend","blockList","unblockFriend","updateDisplayName","updateDisplayIcon","displayIcon","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDaZiqbkNS-wFDih0zU3rv0bUYC_gU8LiY\",\r\n    authDomain: \"langflash-db.firebaseapp.com\",\r\n    databaseURL: \"https://langflash-db.firebaseio.com\",\r\n    projectId: \"langflash-db\",\r\n    storageBucket: \"langflash-db.appspot.com\",\r\n    messagingSenderId: \"750372521965\",\r\n    appId: \"1:750372521965:web:1394ec28b8a0f9e00bc9e4\",\r\n    measurementId: \"G-JY3RHBYG3X\"\r\n  };\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth)\r\n        return;\r\n\r\n    //console.log(\"data coming in from SignUp\", \"userAuth: \", userAuth, \"additionalData: \", additionalData);\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot = await userRef.get();\r\n    \r\n    if (!snapShot.exists)\r\n    {\r\n        const {email} = userAuth;\r\n        const joinDate = new Date();\r\n\r\n        const displayName = !userAuth.displayName ? userAuth.displayName : additionalData.displayName;\r\n\r\n        try {\r\n            await userRef.set({displayName, email, joinDate, ...additionalData});\r\n        } catch (error) {\r\n            console.log(\"error creating user\", error.message)\r\n        }\r\n    }\r\n\r\n    return userRef;\r\n}\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nprovider.setCustomParameters({prompt: 'select_account'});\r\n\r\nexport const SignInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport const fetchReferenceObject = (referenceString) => {\r\n    return firestore.doc(referenceString);\r\n}\r\n\r\nexport const filterActiveFriends = async (friendsList) => {\r\n    return await friendsList.filter((friend, idx) => idx < 5 && firestore.doc(friend).get().activityStatus === \"online\");\r\n}\r\n\r\nexport const appendFriend = async (id, friendsList, friend) => {\r\n    //caches the referenceString within friendsList at this point\r\n    return await firestore.doc(`users/${id}`).set({friendsList: [...friendsList, friend]});\r\n}\r\n\r\nexport const deleteFriend = async (id, friendsList, friend) => {\r\n        return await firestore.doc(`users/${id}`).set({friendsList: friendsList.filter((it) => it === friend)});\r\n}\r\n\r\nexport const blockFriend = async (friendsList, blockList, friend) => {\r\n\r\n}\r\n\r\nexport const unblockFriend = async (blockList, friendsList, friend) => {\r\n\r\n}\r\n\r\nexport const updateDisplayName = async (id, displayName) => {\r\n    await firestore.doc(`users/${id}`).set({displayName: displayName});\r\n    return displayName;\r\n}\r\n\r\nexport const updateDisplayIcon = async (id, displayIcon) => {\r\n    await firestore.doc(`users/${id}`).set({displayIcon: displayIcon});\r\n    return displayIcon;\r\n}\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {const newDocRef = collectionRef.doc()\r\n    batch.set(newDocRef, obj)});\r\n\r\n\r\n   return await batch.commit();\r\n  }\r\n\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}