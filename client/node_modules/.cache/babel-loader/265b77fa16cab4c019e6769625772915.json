{"ast":null,"code":"var _jsxFileName = \"/Users/stanton.dobson/Documents/Portfolio_Projects/LangFlashApp/client/src/components/decks/decks.component.jsx\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Card from '../card/card.component';\nimport PopUpWindow from '../pop-up-window/pop-up-window.component';\nimport FormInput from '../form-input/form-input.component';\nimport DecksButton from '../decks-button/decks-button.component';\nimport CardButton from '../card-button/card-button.component';\nimport CardForm from '../card-form/card-form.component';\nimport { DeckContext } from '../../providers/deck/deck.provider';\nimport { DecksContainer, ScrollWindow, DeckCell, DisplayTagWithTooltip, CardCancelContainer, CancelContainer, DeckDisplay, CardCell } from './decks.styles';\n\nconst Decks = ({\n  activeDecks,\n  changeActiveDecks,\n  isUser,\n  isPublicProfile\n}) => {\n  const {\n    visible,\n    popUp,\n    toggleVisible,\n    triggerPopUp\n  } = useContext(DeckContext);\n  const [selectedDeck, setSelectedDeck] = useState(null);\n  const [cardEdited, setCardEdited] = useState(false);\n  const [searchText, setSearchText] = useState(\"\");\n  const [cardSubmission, setCardSubmission] = useState({\n    frontText: \"\",\n    backText: \"\"\n  });\n  const [tempSubmission, setTempSubmission] = useState({\n    tempFront: \"\",\n    tempBack: \"\"\n  });\n  const [stepCounter, setStepCounter] = useState(0);\n  const didMount = useRef(false);\n  useEffect(() => {\n    if (didMount.current && selectedDeck && !cardEdited) {\n      triggerPopUp();\n    } else if (cardEdited) {\n      setCardSubmission({\n        frontText: \"\",\n        backText: \"\"\n      });\n      setTempSubmission({\n        tempFront: \"\",\n        tempBack: \"\"\n      });\n      setCardEdited(false);\n    } else {\n      didMount.current = true;\n    }\n  }, [selectedDeck]);\n  useEffect(() => {\n    if (didMount.current && selectedDeck) {\n      if (stepCounter !== 0) {\n        setStepCounter((stepCounter + 1) % 3);\n      }\n\n      if (stepCounter === 2) {\n        const {\n          frontText,\n          backText\n        } = cardSubmission;\n        const {\n          index,\n          deck,\n          deck: {\n            cards\n          }\n        } = selectedDeck;\n        setSelectedDeck({\n          index: index,\n          deck: { ...deck,\n            cards: [...cards, {\n              frontText,\n              backText\n            }]\n          }\n        });\n      }\n    } else {\n      didMount.current = true;\n    }\n  }, [cardSubmission]);\n\n  const handleSearch = event => {\n    setSearchText(event.target.value); //I think the filtering should be handled with onSubmit --> The data that we have to filter through could be large\n    //and doing a filter on every keystroke is probably inefficient at best\n    //const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    //<CardList monsters = {filteredMonsters}/> \n  };\n\n  const handleSearchChange = event => {\n    const {\n      value\n    } = event.target;\n    setSearchText(value);\n  };\n\n  const handlePopUpOpen = event => {\n    const deckToAdd = activeDecks[event.currentTarget.getAttribute('id')].deck ? activeDecks[event.currentTarget.getAttribute('id')].deck : activeDecks[event.currentTarget.getAttribute('id')];\n    setSelectedDeck({\n      index: event.currentTarget.getAttribute('id'),\n      deck: deckToAdd\n    });\n  };\n\n  const handlePopUpClose = () => {\n    triggerPopUp();\n    const {\n      index,\n      deck\n    } = selectedDeck;\n    var newActiveDecks = [];\n    activeDecks.map(deck => newActiveDecks.push(deck));\n    newActiveDecks[index] = deck;\n    if (isUser) changeActiveDecks(newActiveDecks);\n    setSelectedDeck(null);\n  };\n\n  const handleSubmission = event => {\n    const {\n      key\n    } = event;\n\n    if (key === 'Enter') {\n      setCardEdited(true);\n      const {\n        target: {\n          value\n        }\n      } = event;\n\n      switch (stepCounter) {\n        case 0:\n          setCardSubmission({ ...cardSubmission\n          });\n          break;\n\n        case 1:\n          setCardSubmission({ ...cardSubmission,\n            frontText: value\n          });\n          break;\n\n        case 2:\n          setCardSubmission({ ...cardSubmission,\n            backText: value\n          });\n          break;\n\n        default:\n          break;\n      }\n    }\n  };\n\n  const handleChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n\n    switch (stepCounter) {\n      case 1:\n        setTempSubmission({ ...tempSubmission,\n          tempFront: value\n        });\n        break;\n\n      case 2:\n        setTempSubmission({ ...tempSubmission,\n          tempBack: value\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleDeckUpdate = event => {\n    const {\n      id,\n      name,\n      value\n    } = event.target;\n    let newActiveDecks = [...activeDecks];\n\n    if (!name) {\n      newActiveDecks.push({\n        deck: {\n          name: \"\",\n          description: \"\",\n          cards: []\n        }\n      });\n      changeActiveDecks(newActiveDecks);\n    } else {\n      const truncatedValue = value.substring(0, Math.min(value.length, 100));\n      newActiveDecks[id] = {\n        [name]: truncatedValue\n      };\n      changeActiveDecks(newActiveDecks);\n    }\n  };\n\n  const handleCancel = () => {\n    setCardEdited(false);\n    setCardSubmission({\n      frontText: \"\",\n      backText: \"\"\n    });\n    setTempSubmission({\n      tempFront: \"\",\n      tempBack: \"\"\n    });\n    setStepCounter(0);\n  };\n\n  const handleDeckDeletion = event => {\n    const updatedActiveDecks = [];\n    activeDecks.map((deck, idx) => {\n      if (idx != event.currentTarget.getAttribute('id')) {\n        updatedActiveDecks.push(deck);\n      }\n    });\n    changeActiveDecks(updatedActiveDecks);\n  };\n\n  const handleCardDeletion = event => {\n    setCardEdited(true);\n    const updatedSelectedDeck = {\n      cards: [],\n      name: selectedDeck.deck.name,\n      description: selectedDeck.deck.description\n    };\n    selectedDeck.deck.cards.map((card, idx) => {\n      if (idx != event.currentTarget.getAttribute('id')) {\n        updatedSelectedDeck.deck.cards.push(card);\n      }\n    });\n    setSelectedDeck({ ...selectedDeck,\n      deck: updatedSelectedDeck\n    });\n  };\n\n  const getCardElement = () => {\n    switch (stepCounter) {\n      case 0:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          onClick: () => setStepCounter((stepCounter + 1) % 3),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(CardButton, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 87\n          }\n        }));\n\n      case 1:\n        return /*#__PURE__*/React.createElement(CardCell, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(CardForm, {\n          frontSide: true,\n          tempFront: tempSubmission.tempFront,\n          handleChange: handleChange,\n          handleSubmission: handleSubmission,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 38\n          }\n        }), /*#__PURE__*/React.createElement(CardCancelContainer, {\n          style: {\n            top: \"-130px\"\n          },\n          onClick: handleCancel,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }\n        }, \"\\uD835\\uDDEB\"));\n\n      case 2:\n        return /*#__PURE__*/React.createElement(CardCell, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(CardForm, {\n          frontSide: false,\n          tempBack: tempSubmission.tempBack,\n          handleChange: handleChange,\n          handleSubmission: handleSubmission,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 38\n          }\n        }), /*#__PURE__*/React.createElement(CardCancelContainer, {\n          style: {\n            top: \"-130px\"\n          },\n          onClick: handleCancel,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }\n        }, \"\\uD835\\uDDEB\"));\n\n      default:\n        break;\n    }\n  }; // console.log(cardEdited);\n  // console.log(selectedDeck);\n  //console.log(stepCounter);\n\n\n  return /*#__PURE__*/React.createElement(DecksContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      cursor: \"pointer\",\n      position: \"absolute\",\n      left: \"20px\",\n      width: \"90px\",\n      height: \"55px\"\n    },\n    onClick: () => {\n      if (popUp) triggerPopUp();\n      toggleVisible();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DecksButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 31\n    }\n  })), popUp ? /*#__PURE__*/React.createElement(PopUpWindow, {\n    handlePopUpClose: handlePopUpClose,\n    isCardPopUp: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 20\n    }\n  }, selectedDeck.deck.cards.map((card, idx) => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 72\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    id: idx,\n    card: card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(CardCancelContainer, {\n    style: {\n      left: \"0px\"\n    },\n    id: idx,\n    onClick: handleCardDeletion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 33\n    }\n  }, \"\\uD835\\uDDEB\"))), isUser ? getCardElement() : null) : visible ? /*#__PURE__*/React.createElement(ScrollWindow, {\n    isPublicProfile: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    style: {\n      position: \"relative\",\n      left: \"20%\",\n      width: \"60%\"\n    },\n    type: \"search\",\n    placeholder: \"search\",\n    value: searchText,\n    onChange: handleSearchChange,\n    onSubmit: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(DeckDisplay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }, activeDecks.map((deck, idx) => /*#__PURE__*/React.createElement(DeckCell, {\n    key: idx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 60\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: idx,\n    style: {\n      cursor: \"pointer\",\n      position: \"relative\",\n      height: \"55px\",\n      width: \"95px\",\n      left: \"30px\"\n    },\n    onClick: handlePopUpOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(DecksButton, {\n    isAdd: true,\n    noPlus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(DisplayTagWithTooltip, {\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 37\n    }\n  }, deck.name ? deck.name : `Deck ${idx}`, /*#__PURE__*/React.createElement(\"span\", {\n    name: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 41\n    }\n  }, deck.description ? deck.description : 'Add A Description')), /*#__PURE__*/React.createElement(CancelContainer, {\n    id: idx,\n    onClick: handleDeckDeletion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 37\n    }\n  }, \"\\uD835\\uDDEB\"))), isUser ? /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleDeckUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(DecksButton, {\n    isAdd: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 63\n    }\n  })) : null)) : null);\n};\n\nexport default Decks;","map":{"version":3,"sources":["/Users/stanton.dobson/Documents/Portfolio_Projects/LangFlashApp/client/src/components/decks/decks.component.jsx"],"names":["React","useState","useContext","useEffect","useRef","Card","PopUpWindow","FormInput","DecksButton","CardButton","CardForm","DeckContext","DecksContainer","ScrollWindow","DeckCell","DisplayTagWithTooltip","CardCancelContainer","CancelContainer","DeckDisplay","CardCell","Decks","activeDecks","changeActiveDecks","isUser","isPublicProfile","visible","popUp","toggleVisible","triggerPopUp","selectedDeck","setSelectedDeck","cardEdited","setCardEdited","searchText","setSearchText","cardSubmission","setCardSubmission","frontText","backText","tempSubmission","setTempSubmission","tempFront","tempBack","stepCounter","setStepCounter","didMount","current","index","deck","cards","handleSearch","event","target","value","handleSearchChange","handlePopUpOpen","deckToAdd","currentTarget","getAttribute","handlePopUpClose","newActiveDecks","map","push","handleSubmission","key","handleChange","handleDeckUpdate","id","name","description","truncatedValue","substring","Math","min","length","handleCancel","handleDeckDeletion","updatedActiveDecks","idx","handleCardDeletion","updatedSelectedDeck","card","getCardElement","top","cursor","position","left","width","height"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect, useRef} from 'react'\nimport Card from '../card/card.component';\nimport PopUpWindow from '../pop-up-window/pop-up-window.component';\nimport FormInput from '../form-input/form-input.component';\nimport DecksButton from '../decks-button/decks-button.component';\nimport CardButton from '../card-button/card-button.component';\nimport CardForm from '../card-form/card-form.component';\nimport {DeckContext} from '../../providers/deck/deck.provider';\nimport {DecksContainer, ScrollWindow, DeckCell, DisplayTagWithTooltip,\n    CardCancelContainer, CancelContainer, DeckDisplay, CardCell} from './decks.styles';\n\nconst Decks = ({activeDecks, changeActiveDecks, isUser, isPublicProfile}) => {\n\n    const {visible, popUp, toggleVisible, triggerPopUp} = useContext(DeckContext);\n    const [selectedDeck, setSelectedDeck] = useState(null);\n    const [cardEdited, setCardEdited] = useState(false);\n    const [searchText, setSearchText] = useState(\"\");\n    const [cardSubmission, setCardSubmission] = useState({frontText: \"\", backText: \"\"});\n    const [tempSubmission, setTempSubmission] = useState({tempFront: \"\", tempBack: \"\"})\n    const [stepCounter, setStepCounter] = useState(0);\n\n\n    const didMount = useRef(false);\n    useEffect(() => {\n        \n        if (didMount.current && selectedDeck && !cardEdited) {\n            triggerPopUp();\n        }\n        else if (cardEdited) {\n            setCardSubmission({ frontText: \"\", backText: \"\"});\n            setTempSubmission({tempFront: \"\", tempBack:\"\"});\n            setCardEdited(false);\n        }\n        else {\n            didMount.current = true;\n        }\n    }, [selectedDeck]); \n\n    useEffect(() => {\n        if (didMount.current && selectedDeck) {\n\n            if (stepCounter !== 0) {\n                setStepCounter((stepCounter + 1) % 3)\n            }\n            \n\n            if (stepCounter === 2) {\n                const {frontText, backText} = cardSubmission;\n                const {index, deck, deck:{cards}} = selectedDeck;\n                setSelectedDeck({index: index, deck: {...deck, cards: [...cards, {frontText, backText}]}});\n            }\n        }\n        else {\n\n            didMount.current = true;\n        }\n\n    }, [cardSubmission])\n    \n\n    const handleSearch = event => {\n        setSearchText(event.target.value);\n\n        //I think the filtering should be handled with onSubmit --> The data that we have to filter through could be large\n        //and doing a filter on every keystroke is probably inefficient at best\n\n        //const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n        //<CardList monsters = {filteredMonsters}/> \n    }\n\n    const handleSearchChange = event => {\n        const {value} = event.target;\n        setSearchText(value)\n    }\n\n    const handlePopUpOpen = event => {\n        const deckToAdd = activeDecks[event.currentTarget.getAttribute('id')].deck ?\n        activeDecks[event.currentTarget.getAttribute('id')].deck : activeDecks[event.currentTarget.getAttribute('id')];\n\n        setSelectedDeck({index: event.currentTarget.getAttribute('id'), \n        deck: deckToAdd});\n    }\n\n    const handlePopUpClose = () => {\n        triggerPopUp();\n\n        const {index, deck} = selectedDeck;\n        var newActiveDecks = [];\n        activeDecks.map((deck) => newActiveDecks.push(deck));\n        newActiveDecks[index] = deck;\n\n        if(isUser) changeActiveDecks(newActiveDecks);\n        setSelectedDeck(null);\n    }\n\n    const handleSubmission = event => {\n        const {key} = event;\n\n        if (key === 'Enter') {\n        setCardEdited(true);\n        const {target: {value}} = event;\n\n\n        switch(stepCounter) {\n            case 0: setCardSubmission ({...cardSubmission});\n                break;\n            case 1: \n            setCardSubmission({...cardSubmission, frontText: value});\n                break;\n            case 2:\n            setCardSubmission({...cardSubmission, backText:value});\n                break;\n            default: \n                break;\n        }\n        \n    } \n    }\n\n    const handleChange = event => {\n        const {target: {value}} = event;        \n\n        switch(stepCounter) {\n            case 1: setTempSubmission({...tempSubmission, tempFront: value})\n                break;\n            case 2: setTempSubmission({...tempSubmission, tempBack: value})\n                break;\n            default:\n                break;\n        }\n    }\n\n    const handleDeckUpdate = event => {\n       const {id, name, value} = event.target;\n       let newActiveDecks = [...activeDecks];\n\n       if(!name) {\n        newActiveDecks.push({deck: {name: \"\", description: \"\", cards: []}});\n        changeActiveDecks(newActiveDecks); \n    } \n       else {\n            const truncatedValue = value.substring(0, Math.min(value.length, 100));\n            newActiveDecks[id] = {[name] : truncatedValue};\n            changeActiveDecks(newActiveDecks);\n        }          \n    }\n\n    const handleCancel = () => {\n        setCardEdited(false);\n        setCardSubmission({frontText: \"\", backText: \"\"})\n        setTempSubmission({tempFront: \"\", tempBack: \"\"});\n        setStepCounter(0);\n    }\n    \n    const handleDeckDeletion = event => {\n\n        const updatedActiveDecks = [];\n        activeDecks.map((deck, idx) => {\n            if (idx != event.currentTarget.getAttribute('id')) {\n                updatedActiveDecks.push(deck);\n            }\n        })\n    \n        changeActiveDecks(updatedActiveDecks);\n        \n    }\n\n    const handleCardDeletion = event => {\n        setCardEdited(true);\n        const updatedSelectedDeck = {cards: [], name: selectedDeck.deck.name, \n        description: selectedDeck.deck.description};\n\n        selectedDeck.deck.cards.map((card, idx) => {\n            if (idx != event.currentTarget.getAttribute('id')) {\n                updatedSelectedDeck.deck.cards.push(card);\n            }\n        })\n\n        setSelectedDeck({...selectedDeck, deck: updatedSelectedDeck});\n    }\n\n    const getCardElement = () => {\n        switch (stepCounter) {\n        \n            case 0: return <div onClick={() => setStepCounter((stepCounter + 1) % 3)}><CardButton/></div>\n            case 1: return <CardCell><CardForm frontSide={true} tempFront={tempSubmission.tempFront} handleChange={handleChange} handleSubmission={handleSubmission}/>\n            <CardCancelContainer style={{top: \"-130px\"}} onClick={handleCancel}>&#120299;</CardCancelContainer></CardCell>\n            case 2: return <CardCell><CardForm frontSide={false} tempBack={tempSubmission.tempBack} handleChange={handleChange} handleSubmission={handleSubmission}/>\n            <CardCancelContainer style={{top: \"-130px\"}} onClick={handleCancel}>&#120299;</CardCancelContainer></CardCell>\n            default:\n                break;\n        }\n    }\n\n    // console.log(cardEdited);\n    // console.log(selectedDeck);\n    //console.log(stepCounter);\n\n    \n    return <DecksContainer>\n        <div style={{cursor: \"pointer\", position: \"absolute\", left: \"20px\", width: \"90px\", height: \"55px\"}} onClick={() => {if (popUp) triggerPopUp()\n            toggleVisible()}}><DecksButton/></div>\n        {\n           popUp ? <PopUpWindow  handlePopUpClose={handlePopUpClose} isCardPopUp>\n                        {\n                            selectedDeck.deck.cards.map((card, idx) => <div>\n                                <Card id={idx} card={card}/>\n                                <CardCancelContainer style={{left: \"0px\"}} id={idx} onClick={handleCardDeletion}>&#120299;</CardCancelContainer>\n                            </div>)\n                        }\n                        {\n                                isUser ? getCardElement() : null\n                        }\n                    \n                    </PopUpWindow>\n           : visible ? <ScrollWindow isPublicProfile>\n                    <FormInput style={{position: \"relative\", left:\"20%\", width: \"60%\"}} type='search' placeholder=\"search\" value={searchText}\n                        onChange={handleSearchChange} onSubmit={null}/> \n                    <DeckDisplay>\n                        {\n                            activeDecks.map((deck, idx) => <DeckCell key={idx}>\n                                    <div id={idx} style={{cursor:\"pointer\", position: \"relative\", height: \"55px\", width: \"95px\", left: \"30px\"}} onClick={handlePopUpOpen}>\n                                    <DecksButton isAdd={true} noPlus={true}/>\n                                    </div>\n                                    <DisplayTagWithTooltip name=\"name\">\n                                        {deck.name ? deck.name : `Deck ${idx}`}\n                                        <span name=\"description\">{deck.description ? deck.description : 'Add A Description'}</span>\n                                    </DisplayTagWithTooltip>\n                                    <CancelContainer id={idx} onClick={handleDeckDeletion}>&#120299;</CancelContainer>\n                                </DeckCell>\n                            )\n                        }\n                    {isUser ? <div onClick={handleDeckUpdate}><DecksButton isAdd={true} /></div> : null}\n                </DeckDisplay>\n            </ScrollWindow> \n            : null\n        }\n    </DecksContainer>\n}\n\nexport default Decks;"]},"metadata":{},"sourceType":"module"}