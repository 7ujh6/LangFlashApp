{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stant\\\\Documents\\\\PortfolioProjects\\\\VentilatorDonationApp\\\\ventilator-donation\\\\client\\\\src\\\\components\\\\decks\\\\decks.component.jsx\";\nimport React, { useState, useContext, useEffect, useRef } from 'react';\nimport Card from '../card/card.component';\nimport PopUpWindow from '../pop-up-window/pop-up-window.component';\nimport FormInput from '../form-input/form-input.component';\nimport DecksButton from '../decks-button/decks-button.component';\nimport CardButton from '../card-button/card-button.component';\nimport CardForm from '../card-form/card-form.component';\nimport { DeckContext } from '../../providers/deck/deck.provider';\nimport { DecksContainer, ScrollWindow, DeckCell, DisplayTagWithTooltip, HeaderButtonsContainer, CancelContainer, DeckDisplay } from './decks.styles';\n\nconst Decks = ({\n  activeDecks,\n  changeActiveDecks,\n  isUser\n}) => {\n  const {\n    visible,\n    popUp,\n    toggleVisible,\n    triggerPopUp\n  } = useContext(DeckContext);\n  const [selectedDeck, setSelectedDeck] = useState(null);\n  const [searchText, setSearchText] = useState(\"\");\n  const [frontSide, flipSides] = useState(true);\n  const [cardSubmission, setCardSubmission] = useState({\n    frontText: \"\",\n    backText: \"\",\n    tempFront: \"\",\n    tempBack: \"\",\n    stepNumber: 0\n  });\n  const didMount = useRef(false);\n  useEffect(() => {\n    if (didMount.current && selectedDeck) {\n      triggerPopUp();\n    } else {\n      didMount.current = true;\n    }\n  }, [selectedDeck]);\n\n  const handleSearch = event => {\n    setSearchText(event.target.value); //I think the filtering should be handled with onSubmit --> The data that we have to filter through could be large\n    //and doing a filter on every keystroke is probably inefficient at best\n    //const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    //<CardList monsters = {filteredMonsters}/> \n  };\n\n  const handleSearchChange = event => {\n    const {\n      value\n    } = event.target;\n    setSearchText(value);\n  };\n\n  const handleFlip = () => {\n    flipSides(!frontSide);\n  };\n\n  const handlePopUpOpen = event => {\n    setSelectedDeck({\n      index: event.currentTarget.getAttribute('id'),\n      deck: activeDecks[event.currentTarget.getAttribute('id')]\n    });\n  };\n\n  const handlePopUpClose = () => {\n    triggerPopUp();\n    const {\n      index,\n      deck\n    } = selectedDeck;\n    var newActiveDecks = [];\n    activeDecks.map(deck => newActiveDecks.push(deck));\n    newActiveDecks[index] = deck;\n    if (isUser) changeActiveDecks(newActiveDecks);\n    setSelectedDeck(null);\n  };\n\n  const handleSubmission = event => {\n    const {\n      value\n    } = event.target;\n    console.log(\"I am being called\");\n\n    switch (cardSubmission.stepNumber) {\n      case 1:\n        setCardSubmission({\n          frontText: value\n        });\n        break;\n\n      case 2:\n        setCardSubmission({\n          backText: value\n        });\n        break;\n\n      default:\n        break;\n    }\n\n    if (cardSubmission.stepNumber === 2) {\n      const {\n        frontText,\n        backText\n      } = cardSubmission;\n      const {\n        index,\n        deck\n      } = selectedDeck;\n      setSelectedDeck({\n        index: index,\n        deck: [...deck, {\n          frontText,\n          backText\n        }]\n      });\n      setCardSubmission({ ...cardSubmission,\n        frontText: \"\",\n        backText: \"\",\n        tempFront: \"\",\n        tempBack: \"\"\n      });\n    }\n\n    setCardSubmission({\n      stepNumber: (cardSubmission.stepNumber + 1) % 3\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      id,\n      value\n    } = event.target;\n\n    switch (id) {\n      case 1:\n        setCardSubmission({\n          tempFront: value\n        });\n        break;\n\n      case 2:\n        setCardSubmission({\n          tempBack: value\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleDeckUpdate = event => {\n    const {\n      id,\n      name,\n      value\n    } = event.target;\n    let newActiveDecks = activeDecks;\n\n    if (!name) {\n      newActiveDecks.push({\n        deck: {\n          name: \"\",\n          description: \"\",\n          cards: []\n        }\n      });\n      changeActiveDecks(newActiveDecks);\n    } else {\n      const truncatedValue = value.substring(0, Math.min(value.length, 100));\n      newActiveDecks[id] = {\n        [name]: truncatedValue\n      };\n      changeActiveDecks(newActiveDecks);\n    }\n  };\n\n  const handleCancel = () => {\n    setCardSubmission({\n      frontText: \"\",\n      backText: \"\",\n      tempFront: \"\",\n      tempBack: \"\",\n      stepNumber: 0\n    });\n  };\n\n  const handleDeckDeletion = event => {\n    const updatedActiveDecks = [];\n    activeDecks.map((deck, idx) => {\n      if (idx != event.currentTarget.getAttribute('id')) {\n        updatedActiveDecks.push(deck);\n      }\n    });\n    changeActiveDecks(updatedActiveDecks);\n  };\n\n  const handleCardDeletion = event => {\n    const {\n      index\n    } = event.target;\n    setSelectedDeck({ ...selectedDeck,\n      deck: selectedDeck.deck.splice(index, 1)\n    });\n  };\n\n  const getCardElement = () => {\n    switch (cardSubmission.stepNumber) {\n      case 0:\n        return /*#__PURE__*/React.createElement(\"div\", {\n          onClick: handleSubmission,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 28\n          }\n        }, /*#__PURE__*/React.createElement(CardButton, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 60\n          }\n        }));\n\n      case 1:\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CancelContainer, {\n          onClick: handleCancel,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 30\n          }\n        }, \"\\uD835\\uDDEB\"), /*#__PURE__*/React.createElement(CardForm, {\n          value: cardSubmission.tempFront,\n          onChange: handleChange,\n          onSubmit: handleSubmission,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 97\n          }\n        }));\n\n      case 2:\n        return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardForm, {\n          value: cardSubmission.tempBack,\n          onChange: handleChange,\n          onSubmit: handleSubmission,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 30\n          }\n        }));\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(DecksContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      cursor: \"pointer\",\n      position: \"absolute\",\n      left: \"20px\",\n      width: \"90px\",\n      height: \"55px\"\n    },\n    onClick: () => {\n      if (popUp) triggerPopUp();\n      toggleVisible();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DecksButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 31\n    }\n  })), popUp ? /*#__PURE__*/React.createElement(PopUpWindow, {\n    handlePopUpClose: handlePopUpClose,\n    isCardPopUp: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 20\n    }\n  }, selectedDeck.deck.deck.cards.map((card, idx) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n    id: idx,\n    onClick: handleFlip,\n    card: card,\n    frontSide: frontSide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(CancelContainer, {\n    style: {\n      left: \"12px\",\n      top: \"60px\"\n    },\n    onClick: handleCardDeletion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 33\n    }\n  }, \"\\uD835\\uDDEB\"))), isUser ? getCardElement() : null) : visible ? /*#__PURE__*/React.createElement(ScrollWindow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 24\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    style: {\n      position: \"relative\",\n      left: \"20%\",\n      width: \"60%\"\n    },\n    type: \"search\",\n    placeholder: \"search\",\n    value: searchText,\n    onChange: handleSearchChange,\n    onSubmit: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(DeckDisplay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, activeDecks.map((deck, idx) => /*#__PURE__*/React.createElement(DeckCell, {\n    key: idx,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 60\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: idx,\n    style: {\n      cursor: \"pointer\",\n      position: \"relative\",\n      height: \"55px\",\n      width: \"95px\",\n      left: \"30px\"\n    },\n    onClick: handlePopUpOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(DecksButton, {\n    isAdd: true,\n    noPlus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(DisplayTagWithTooltip, {\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 37\n    }\n  }, deck.name ? deck.name : `Deck ${idx}`, /*#__PURE__*/React.createElement(\"span\", {\n    name: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 41\n    }\n  }, deck.description ? deck.description : 'Add A Description')), /*#__PURE__*/React.createElement(CancelContainer, {\n    id: idx,\n    onClick: handleDeckDeletion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 37\n    }\n  }, \"\\uD835\\uDDEB\"))), isUser ? /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleDeckUpdate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(DecksButton, {\n    isAdd: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 63\n    }\n  })) : null)) : null);\n};\n\nexport default Decks;","map":{"version":3,"sources":["C:/Users/stant/Documents/PortfolioProjects/VentilatorDonationApp/ventilator-donation/client/src/components/decks/decks.component.jsx"],"names":["React","useState","useContext","useEffect","useRef","Card","PopUpWindow","FormInput","DecksButton","CardButton","CardForm","DeckContext","DecksContainer","ScrollWindow","DeckCell","DisplayTagWithTooltip","HeaderButtonsContainer","CancelContainer","DeckDisplay","Decks","activeDecks","changeActiveDecks","isUser","visible","popUp","toggleVisible","triggerPopUp","selectedDeck","setSelectedDeck","searchText","setSearchText","frontSide","flipSides","cardSubmission","setCardSubmission","frontText","backText","tempFront","tempBack","stepNumber","didMount","current","handleSearch","event","target","value","handleSearchChange","handleFlip","handlePopUpOpen","index","currentTarget","getAttribute","deck","handlePopUpClose","newActiveDecks","map","push","handleSubmission","console","log","handleChange","id","handleDeckUpdate","name","description","cards","truncatedValue","substring","Math","min","length","handleCancel","handleDeckDeletion","updatedActiveDecks","idx","handleCardDeletion","splice","getCardElement","cursor","position","left","width","height","card","top"],"mappings":"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","sourcesContent":["import React, {useState, useContext, useEffect, useRef} from 'react'\r\nimport Card from '../card/card.component';\r\nimport PopUpWindow from '../pop-up-window/pop-up-window.component';\r\nimport FormInput from '../form-input/form-input.component';\r\nimport DecksButton from '../decks-button/decks-button.component';\r\nimport CardButton from '../card-button/card-button.component';\r\nimport CardForm from '../card-form/card-form.component';\r\nimport {DeckContext} from '../../providers/deck/deck.provider';\r\nimport {DecksContainer, ScrollWindow, DeckCell, DisplayTagWithTooltip,\r\n     HeaderButtonsContainer, CancelContainer, DeckDisplay} from './decks.styles';\r\n\r\nconst Decks = ({activeDecks, changeActiveDecks, isUser}) => {\r\n\r\n    const {visible, popUp, toggleVisible, triggerPopUp} = useContext(DeckContext);\r\n    const [selectedDeck, setSelectedDeck] = useState(null);\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [frontSide, flipSides] = useState(true);\r\n    const [cardSubmission, setCardSubmission] = useState({frontText: \"\", backText: \"\", tempFront: \"\",\r\n         tempBack: \"\", stepNumber: 0});\r\n\r\n    const didMount = useRef(false);\r\n    useEffect(() => {\r\n        \r\n        if (didMount.current && selectedDeck) {\r\n            triggerPopUp();\r\n        }\r\n        else {\r\n            didMount.current = true;\r\n        }\r\n    }, [selectedDeck]); \r\n\r\n    const handleSearch = event => {\r\n        setSearchText(event.target.value);\r\n\r\n        //I think the filtering should be handled with onSubmit --> The data that we have to filter through could be large\r\n        //and doing a filter on every keystroke is probably inefficient at best\r\n\r\n        //const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\r\n        //<CardList monsters = {filteredMonsters}/> \r\n    }\r\n\r\n    const handleSearchChange = event => {\r\n        const {value} = event.target;\r\n        setSearchText(value)\r\n    }\r\n\r\n    const handleFlip = () => {\r\n        flipSides(!frontSide);\r\n    }\r\n\r\n    const handlePopUpOpen = event => {\r\n        setSelectedDeck({index: event.currentTarget.getAttribute('id'), \r\n        deck: activeDecks[event.currentTarget.getAttribute('id')]});\r\n    }\r\n\r\n    const handlePopUpClose = () => {\r\n        triggerPopUp();\r\n\r\n        const {index, deck} = selectedDeck;\r\n        var newActiveDecks = [];\r\n        activeDecks.map((deck) => newActiveDecks.push(deck));\r\n        newActiveDecks[index] = deck;\r\n\r\n        if(isUser) changeActiveDecks(newActiveDecks);\r\n        setSelectedDeck(null);\r\n    }\r\n\r\n    const handleSubmission = event => {\r\n        const {value} = event.target;\r\n        console.log(\"I am being called\");\r\n\r\n        switch(cardSubmission.stepNumber) {\r\n            case 1: setCardSubmission({frontText: value})\r\n                break;\r\n            case 2: setCardSubmission({backText: value})\r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n\r\n        if (cardSubmission.stepNumber === 2) {\r\n            const {frontText, backText} = cardSubmission;\r\n            const {index, deck} = selectedDeck;\r\n\r\n            setSelectedDeck({index: index, deck: [...deck, {frontText, backText}]})\r\n            setCardSubmission({...cardSubmission, frontText: \"\", backText: \"\", tempFront: \"\", tempBack:\"\"})\r\n        }\r\n\r\n        setCardSubmission({stepNumber: (cardSubmission.stepNumber + 1) % 3 })\r\n    }\r\n\r\n    const handleChange = event => {\r\n        const {id, value} = event.target;\r\n        switch(id) {\r\n            case 1: setCardSubmission({tempFront: value})\r\n                break;\r\n            case 2: setCardSubmission({tempBack: value})\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const handleDeckUpdate = event => {\r\n       const {id, name, value} = event.target;\r\n       let newActiveDecks = activeDecks;\r\n\r\n       if(!name) {\r\n        newActiveDecks.push({deck: {name: \"\", description: \"\", cards: []}});\r\n        changeActiveDecks(newActiveDecks); \r\n    } \r\n       else {\r\n            const truncatedValue = value.substring(0, Math.min(value.length, 100));\r\n            newActiveDecks[id] = {[name] : truncatedValue};\r\n            changeActiveDecks(newActiveDecks);\r\n        }          \r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setCardSubmission({frontText: \"\", backText: \"\", tempFront: \"\",\r\n         tempBack: \"\", stepNumber: 0})\r\n    }\r\n    \r\n    const handleDeckDeletion = event => {\r\n\r\n        const updatedActiveDecks = [];\r\n        activeDecks.map((deck, idx) => {\r\n            if (idx != event.currentTarget.getAttribute('id')) {\r\n                updatedActiveDecks.push(deck);\r\n            }\r\n        })\r\n    \r\n        changeActiveDecks(updatedActiveDecks);\r\n        \r\n    }\r\n\r\n    const handleCardDeletion = event => {\r\n        const {index} = event.target;\r\n        setSelectedDeck({...selectedDeck, deck: selectedDeck.deck.splice(index, 1)});\r\n    }\r\n\r\n    const getCardElement = () => {\r\n\r\n        switch (cardSubmission.stepNumber) {\r\n\r\n            case 0: return <div onClick={handleSubmission}><CardButton/></div>\r\n            case 1: return <><CancelContainer onClick={handleCancel}>&#120299;</CancelContainer><CardForm value={cardSubmission.tempFront}\r\n                onChange={handleChange} onSubmit={handleSubmission}/></>\r\n            case 2: return <><CardForm value={cardSubmission.tempBack}\r\n                onChange={handleChange} onSubmit={handleSubmission}/></>\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    \r\n    return <DecksContainer>\r\n        <div style={{cursor: \"pointer\", position: \"absolute\", left: \"20px\", width: \"90px\", height: \"55px\"}} onClick={() => {if (popUp) triggerPopUp()\r\n            toggleVisible()}}><DecksButton/></div>\r\n        {\r\n\r\n           popUp ? <PopUpWindow handlePopUpClose={handlePopUpClose} isCardPopUp>\r\n                        {\r\n                            selectedDeck.deck.deck.cards.map((card, idx) => <>\r\n                                <Card id={idx} onClick={handleFlip} card = {card} frontSide = {frontSide}/>\r\n                                <CancelContainer style={{left:\"12px\", top:\"60px\"}} onClick={handleCardDeletion}>&#120299;</CancelContainer>\r\n                            </>)\r\n                        }\r\n                        {\r\n                                isUser ? getCardElement() : null\r\n                        }\r\n                    \r\n                    </PopUpWindow>\r\n           : visible ? <ScrollWindow>\r\n                    <FormInput style={{position: \"relative\", left:\"20%\", width: \"60%\"}} type='search' placeholder=\"search\" value={searchText}\r\n                        onChange={handleSearchChange} onSubmit={null}/> \r\n                    <DeckDisplay>\r\n                        {\r\n                            activeDecks.map((deck, idx) => <DeckCell key={idx}>\r\n                                    <div id={idx} style={{cursor:\"pointer\", position: \"relative\", height: \"55px\", width: \"95px\", left: \"30px\"}} onClick={handlePopUpOpen}>\r\n                                    <DecksButton isAdd={true} noPlus={true}/>\r\n                                    </div>\r\n                                    <DisplayTagWithTooltip name=\"name\">\r\n                                        {deck.name ? deck.name : `Deck ${idx}`}\r\n                                        <span name=\"description\">{deck.description ? deck.description : 'Add A Description'}</span>\r\n                                    </DisplayTagWithTooltip>\r\n                                    <CancelContainer id={idx} onClick={handleDeckDeletion}>&#120299;</CancelContainer>\r\n                                </DeckCell>\r\n                            )\r\n                        }\r\n                    {isUser ? <div onClick={handleDeckUpdate}><DecksButton isAdd={true} /></div> : null}\r\n                </DeckDisplay>\r\n            </ScrollWindow> \r\n            : null\r\n        }\r\n    </DecksContainer>\r\n}\r\n\r\nexport default Decks;"]},"metadata":{},"sourceType":"module"}