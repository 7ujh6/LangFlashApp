{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stant\\\\Documents\\\\PortfolioProjects\\\\VentilatorDonationApp\\\\ventilator-donation\\\\src\\\\App.js\";\nimport React, { useContext } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport Header from './components/header/header.component';\nimport Homepage from './pages/homepage/homepage.component.jsx';\nimport SignInPage from './pages/sign-in-page/sign-in-page.component';\nimport SignUpPage from './pages/sign-up-page/sign-up-page.component';\nimport AboutUsPage from './pages/about-us-page/about-us-page.component';\nimport HowToUsePage from './pages/how-to-use-page/how-to-use-page.component.jsx';\nimport { auth, createUserDocument } from './firebase/firebase.utils';\nimport { UserContext } from './providers/user/user.provider';\nimport defaultProfileIcon from './assets/default-profile-icon.png';\nimport './App.css';\nimport ProfileDisplayProvider from './providers/profile-display/profile-display.provider'; //import Redirect -> is there an option that waits a duration before redirecting?\n\nvar {\n  currentUser,\n  changeCurrentUser\n} = useContext(UserContext);\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.unsubscribeFromAuth = null;\n  }\n\n  componentDidMount() {\n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserDocument(userAuth, {\n          displayIcon: defaultProfileIcon,\n          friendsList: [],\n          blackList: [],\n          activityStatus: {\n            value: \"online\"\n          },\n          activeDecks: []\n        });\n        await userRef.update({\n          activityStatus: \"online\"\n        });\n        userRef.onSnapshot(snapShot => {\n          this.setState({\n            currentUser: {\n              id: snapShot.id,\n              ...snapShot.data()\n            }\n          });\n        });\n      } else changeCurrentUser(userAuth);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ProfileDisplayProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: Homepage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => currentUser ? /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 70\n        }\n      }) : /*#__PURE__*/React.createElement(SignInPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 93\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/signup\",\n      render: () => currentUser ? /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/getstarted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 70\n        }\n      }) : /*#__PURE__*/React.createElement(SignUpPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 103\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/aboutus\",\n      component: AboutUsPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/howtouse\",\n      render: () => !currentUser ? /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/signin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 73\n        }\n      }) : /*#__PURE__*/React.createElement(HowToUsePage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 102\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/getstarted\",\n      component: HowToUsePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nApp.contextType = UserContext;\nexport default App;","map":{"version":3,"sources":["C:/Users/stant/Documents/PortfolioProjects/VentilatorDonationApp/ventilator-donation/src/App.js"],"names":["React","useContext","Switch","Route","Redirect","Header","Homepage","SignInPage","SignUpPage","AboutUsPage","HowToUsePage","auth","createUserDocument","UserContext","defaultProfileIcon","ProfileDisplayProvider","currentUser","changeCurrentUser","App","Component","unsubscribeFromAuth","componentDidMount","onAuthStateChanged","userAuth","userRef","displayIcon","friendsList","blackList","activityStatus","value","activeDecks","update","onSnapshot","snapShot","setState","id","data","render","contextType"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react';\nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport Header from './components/header/header.component';\nimport Homepage from './pages/homepage/homepage.component.jsx';\nimport SignInPage from './pages/sign-in-page/sign-in-page.component';\nimport SignUpPage from './pages/sign-up-page/sign-up-page.component';\nimport AboutUsPage from './pages/about-us-page/about-us-page.component';\nimport HowToUsePage from './pages/how-to-use-page/how-to-use-page.component.jsx';\nimport {auth, createUserDocument} from './firebase/firebase.utils';\nimport {UserContext} from './providers/user/user.provider';\nimport defaultProfileIcon from './assets/default-profile-icon.png';\nimport './App.css';\nimport ProfileDisplayProvider from './providers/profile-display/profile-display.provider';\n\n//import Redirect -> is there an option that waits a duration before redirecting?\n\nvar {currentUser, changeCurrentUser} = useContext(UserContext);\n\n\nclass App extends React.Component {\n\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n\n    \n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async userAuth => {\n      if (userAuth) {\n        const userRef = await createUserDocument(userAuth, {displayIcon: defaultProfileIcon, friendsList: [], blackList: [], activityStatus: {value: \"online\"}, activeDecks: []});\n        await userRef.update({activityStatus: \"online\"});\n        userRef.onSnapshot(snapShot => {this.setState({currentUser: {id: snapShot.id, ...snapShot.data()}})});\n      }\n\n      else\n        changeCurrentUser(userAuth);\n    })\n  }\n\n\n  render() {\n    return <ProfileDisplayProvider>\n          <Header/>\n          <Switch>\n            <Route exact path=\"/\" component={Homepage}/>\n            <Route exact path=\"/signin\" render={() => currentUser ? (<Redirect to=\"/\"/>) : (<SignInPage/>)}/>\n            <Route exact path=\"/signup\" render={() => currentUser ? (<Redirect to=\"/getstarted\"/>) : (<SignUpPage/>)}/>\n            <Route exact path=\"/aboutus\" component={AboutUsPage}/>\n            <Route exact path=\"/howtouse\" render={() => !currentUser ? (<Redirect to=\"/signin\"/>) : (<HowToUsePage/>)}/>\n            <Route exact path=\"/getstarted\" component={HowToUsePage}/>\n          </Switch>\n        </ProfileDisplayProvider>\n      \n  }\n}\n\nApp.contextType = UserContext;\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}