{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\stant\\\\Documents\\\\PortfolioProjects\\\\VentilatorDonationApp\\\\ventilator-donation\\\\client\\\\src\\\\providers\\\\user\\\\user.provider.jsx\";\nimport React, { createContext, useState } from 'react';\nimport { updateDisplayName, updateDisplayIcon, updateActivityStatus, appendFriend, deleteFriend, blackListUser, whiteListUser, alterActiveDecks } from '../../firebase/firebase.utils';\nexport const UserContext = createContext({\n  currentUser: {\n    id: null,\n    displayName: \"\",\n    displayIcon: null,\n    friendsList: [],\n    blackList: [],\n    activityStatus: \"offline\",\n    activeDecks: [] //array of objects -> {name, language, [items]}; items-> {frontSide=\"\", backSide=\"\"}\n\n  },\n  changeCurrentUser: () => {},\n  changeDisplayName: () => {},\n  changeDisplayIcon: () => {},\n  changeActivityStatus: () => {},\n  changeActiveDecks: () => {},\n  addFriend: () => {},\n  deleteFriend: () => {},\n  blockUser: () => {},\n  unblockUser: () => {}\n});\n\nconst UserProvider = ({\n  children\n}) => {\n  const [displayName, setDisplayName] = useState(\"\");\n  const [displayIcon, setDisplayIcon] = useState(null);\n  const [friendsList, setFriendsList] = useState([]);\n  const [blackList, setBlackList] = useState([]);\n  const [activeDecks, setActiveDecks] = useState([]);\n  const [activityStatus, setActivityStatus] = useState(\"offline\");\n  const [currentUser, setCurrentUser] = useState(null);\n  const [id, setId] = useState(null);\n\n  const changeActiveDecks = activeDecks => {\n    setActiveDecks(alterActiveDecks(id, activeDecks));\n  };\n\n  const changeDisplayName = name => {\n    console.log(\"user provider: \");\n    console.log(\"ID field: \", id, this.id, this.currentUser);\n    console.log(\"Name field: \", name, this.name, this.currentUser.name);\n    setDisplayName(updateDisplayName(id, name)); //may be redundant to set the state if the state is just going to be refreshed by onSnapshot\n  };\n\n  const changeDisplayIcon = image => {\n    setDisplayIcon(updateDisplayIcon(id, image));\n  };\n\n  const addFriend = friend => {\n    unblockUser(id, blackList, friend);\n    setFriendsList(appendFriend(id, friendsList, friend));\n  };\n\n  const removeFriend = friend => {\n    setFriendsList(deleteFriend(id, friendsList, friend));\n  };\n\n  const blockUser = user => {\n    //if the user exists in the friendsList remove them then black list them\n    deleteFriend(id, friendsList, user);\n    setBlackList(blackListUser(id, blackList, user));\n  };\n\n  const unblockUser = user => {\n    setBlackList(whiteListUser(id, blackList, user));\n  };\n\n  const changeActivityStatus = () => {\n    setActivityStatus(updateActivityStatus(id, activityStatus));\n  };\n\n  const changeCurrentUser = user => {\n    setCurrentUser(user);\n  };\n\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      currentUser,\n      displayName,\n      displayIcon,\n      activityStatus,\n      activeDecks,\n      friendsList,\n      blackList,\n      changeActiveDecks,\n      changeCurrentUser,\n      changeActivityStatus,\n      changeDisplayName,\n      changeDisplayIcon,\n      addFriend,\n      removeFriend,\n      blockUser,\n      unblockUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }\n  }, children);\n};\n\nexport default UserProvider;","map":{"version":3,"sources":["C:/Users/stant/Documents/PortfolioProjects/VentilatorDonationApp/ventilator-donation/client/src/providers/user/user.provider.jsx"],"names":["React","createContext","useState","updateDisplayName","updateDisplayIcon","updateActivityStatus","appendFriend","deleteFriend","blackListUser","whiteListUser","alterActiveDecks","UserContext","currentUser","id","displayName","displayIcon","friendsList","blackList","activityStatus","activeDecks","changeCurrentUser","changeDisplayName","changeDisplayIcon","changeActivityStatus","changeActiveDecks","addFriend","blockUser","unblockUser","UserProvider","children","setDisplayName","setDisplayIcon","setFriendsList","setBlackList","setActiveDecks","setActivityStatus","setCurrentUser","setId","name","console","log","image","friend","removeFriend","user"],"mappings":"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","sourcesContent":["import React, {createContext, useState} from 'react';\r\nimport {updateDisplayName, updateDisplayIcon, updateActivityStatus, \r\n    appendFriend, deleteFriend, blackListUser, whiteListUser, alterActiveDecks} from '../../firebase/firebase.utils';\r\n\r\nexport const UserContext = createContext({\r\n    currentUser: {\r\n        id: null,\r\n        displayName: \"\",\r\n        displayIcon: null,\r\n        friendsList: [],\r\n        blackList: [],\r\n        activityStatus: \"offline\",\r\n        activeDecks: [], //array of objects -> {name, language, [items]}; items-> {frontSide=\"\", backSide=\"\"}\r\n    },\r\n    changeCurrentUser: () => {},\r\n    changeDisplayName: () => {},\r\n    changeDisplayIcon: () => {},\r\n    changeActivityStatus: () => {},\r\n    changeActiveDecks: () => {},\r\n    addFriend: () => {},\r\n    deleteFriend: () => {},\r\n    blockUser: () => {},\r\n    unblockUser: () => {}\r\n});\r\n\r\nconst UserProvider = ({children}) => {\r\n\r\n    const [displayName, setDisplayName] = useState(\"\");\r\n    const [displayIcon, setDisplayIcon] = useState(null);\r\n    const [friendsList, setFriendsList] = useState([]);\r\n    const [blackList, setBlackList] = useState([]);\r\n    const [activeDecks, setActiveDecks] = useState([]);\r\n    const [activityStatus, setActivityStatus] = useState(\"offline\");\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    const [id, setId] = useState(null);\r\n    \r\n    const changeActiveDecks = activeDecks => {\r\n        setActiveDecks(alterActiveDecks(id, activeDecks))\r\n    }\r\n\r\n    const changeDisplayName = name => {\r\n        console.log(\"user provider: \")\r\n        console.log(\"ID field: \", id, this.id, this.currentUser);\r\n        console.log(\"Name field: \", name, this.name, this.currentUser.name);\r\n        setDisplayName(updateDisplayName(id, name));\r\n        //may be redundant to set the state if the state is just going to be refreshed by onSnapshot\r\n    }\r\n\r\n    const changeDisplayIcon = image => {\r\n        setDisplayIcon(updateDisplayIcon(id, image));\r\n    }\r\n\r\n    const addFriend = friend => {\r\n        unblockUser(id, blackList, friend);\r\n        setFriendsList(appendFriend(id, friendsList, friend));\r\n    }\r\n\r\n    const removeFriend = friend => {\r\n        setFriendsList(deleteFriend(id, friendsList, friend));\r\n    }\r\n\r\n    const blockUser = user => {\r\n        //if the user exists in the friendsList remove them then black list them\r\n        deleteFriend(id, friendsList, user);\r\n        setBlackList(blackListUser(id, blackList, user));\r\n    }\r\n\r\n    const unblockUser = user => {\r\n        setBlackList(whiteListUser(id, blackList, user));\r\n    }\r\n\r\n    const changeActivityStatus = () => {\r\n        setActivityStatus(updateActivityStatus(id, activityStatus));\r\n    }\r\n\r\n    const changeCurrentUser = user => {\r\n        setCurrentUser(user);\r\n    }\r\n\r\n    return <UserContext.Provider\r\n    value={{currentUser, displayName, displayIcon, activityStatus, activeDecks, friendsList, blackList, changeActiveDecks, changeCurrentUser, changeActivityStatus, changeDisplayName, changeDisplayIcon, addFriend, removeFriend, blockUser, unblockUser}}>{children}</UserContext.Provider>\r\n}\r\n\r\nexport default UserProvider;"]},"metadata":{},"sourceType":"module"}